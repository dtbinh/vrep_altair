// This file is part of V-REP, the Virtual Robot Experimentation Platform.
// 
// Copyright 2006-2014 Dr. Marc Andreas Freese. All rights reserved. 
// marc@coppeliarobotics.com
// www.coppeliarobotics.com
// 
// V-REP is dual-licensed, under the terms of EITHER (at your option):
//   1. V-REP commercial license (contact us for details)
//   2. GNU GPL (see below)
// 
// GNU GPL license:
// -------------------------------------------------------------------
// V-REP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// V-REP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with V-REP.  If not, see <http://www.gnu.org/licenses/>.
// -------------------------------------------------------------------
//
// This file was automatically created for V-REP release V3.1.0 on January 20th 2014

#if !defined(V_REP_internal_INCLUDED_)
#define V_REP_internal_INCLUDED_

#include "v_repConst.h"
#include "v_repTypes.h"

simInt simRunSimulator_internal(const simChar* applicationName,simInt options,simVoid(*initCallBack)(),simVoid(*loopCallBack)(),simVoid(*deinitCallBack)());
simVoid* simGetMainWindow_internal(simInt type);
simChar* simGetLastError_internal();
simInt simSetBooleanParameter_internal(simInt parameter,simBool boolState);
simInt simGetBooleanParameter_internal(simInt parameter);
simInt simSetIntegerParameter_internal(simInt parameter,simInt intState);
simInt simGetIntegerParameter_internal(simInt parameter,simInt* intState);
simInt simSetFloatingParameter_internal(simInt parameter,simFloat floatState);
simInt simGetFloatingParameter_internal(simInt parameter,simFloat* floatState);
simInt simSetStringParameter_internal(simInt parameter,const simChar* str);
simChar* simGetStringParameter_internal(simInt parameter);
simInt simGetObjectHandle_internal(const simChar* objectName);
simInt simRemoveObject_internal(simInt objectHandle);
simChar* simGetObjectName_internal(simInt objectHandle);
simInt simGetObjects_internal(simInt index,simInt objectType);
simInt simSetObjectName_internal(simInt objectHandle,const simChar* objectName);
simInt simGetCollectionHandle_internal(const simChar* collectionName);
simInt simRemoveCollection_internal(simInt collectionHandle);
simChar* simGetCollectionName_internal(simInt collectionHandle);
simInt simSetCollectionName_internal(simInt collectionHandle,const simChar* collectionName);
simInt simGetObjectMatrix_internal(simInt objectHandle,simInt relativeToObjectHandle,simFloat* matrix);
simInt simSetObjectMatrix_internal(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* matrix);
simInt simGetObjectPosition_internal(simInt objectHandle,simInt relativeToObjectHandle,simFloat* position);
simInt simSetObjectPosition_internal(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* position);
simInt simGetObjectOrientation_internal(simInt objectHandle,simInt relativeToObjectHandle,simFloat* eulerAngles);
simInt simGetObjectQuaternion_internal(simInt objectHandle,simInt relativeToObjectHandle,simFloat* quaternion);
simInt simSetObjectQuaternion_internal(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* quaternion);
simInt simSetObjectOrientation_internal(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* eulerAngles);
simInt simGetJointPosition_internal(simInt objectHandle,simFloat* position);
simInt simSetJointPosition_internal(simInt objectHandle,simFloat position);
simInt simSetJointTargetPosition_internal(simInt objectHandle,simFloat targetPosition);
simInt simGetJointTargetPosition_internal(simInt objectHandle,simFloat* targetPosition);
simInt simSetJointForce_internal(simInt objectHandle,simFloat forceOrTorque);
simInt simGetPathPosition_internal(simInt objectHandle,simFloat* position);
simInt simSetPathPosition_internal(simInt objectHandle,simFloat position);
simInt simGetPathLength_internal(simInt objectHandle,simFloat* length);
simInt simGetJointMatrix_internal(simInt objectHandle,simFloat* matrix);
simInt simSetSphericalJointMatrix_internal(simInt objectHandle,const simFloat* matrix);
simInt simGetJointInterval_internal(simInt objectHandle,simBool* cyclic,simFloat* interval);
simInt simSetJointInterval_internal(simInt objectHandle,simBool cyclic,const simFloat* interval);
simInt simGetObjectParent_internal(simInt objectHandle);
simInt simGetObjectChild_internal(simInt objectHandle,simInt index);
simInt simSetObjectParent_internal(simInt objectHandle,simInt parentObjectHandle,simBool keepInPlace);
simInt simGetObjectType_internal(simInt objectHandle);
simInt simGetJointType_internal(simInt objectHandle);
simInt simBuildIdentityMatrix_internal(simFloat* matrix);
simInt simCopyMatrix_internal(const simFloat* matrixIn,simFloat* matrixOut);
simInt simBuildMatrix_internal(const simFloat* position,const simFloat* eulerAngles,simFloat* matrix);
simInt simBuildMatrixQ_internal(const simFloat* position,const simFloat* quaternion,simFloat* matrix);
simInt simGetEulerAnglesFromMatrix_internal(const simFloat* matrix,simFloat* eulerAngles);
simInt simGetQuaternionFromMatrix_internal(const simFloat* matrix,simFloat* quaternion);
simInt simInvertMatrix_internal(simFloat* matrix);
simInt simMultiplyMatrices_internal(const simFloat* matrixIn1,const simFloat* matrixIn2,simFloat* matrixOut);
simInt simInterpolateMatrices_internal(const simFloat* matrixIn1,const simFloat* matrixIn2,simFloat interpolFactor,simFloat* matrixOut);
simInt simTransformVector_internal(const simFloat* matrix,simFloat* vect);
simInt simReservedCommand_internal(simInt v,simInt w);
simFloat simGetSimulationTime_internal();
simInt simGetSimulationState_internal();
simFloat simGetSystemTime_internal();
simInt simGetSystemTimeInMilliseconds_internal();
simUInt simGetSystemTimeInMs_internal(simInt previousTime);
simInt simLoadScene_internal(const simChar* filename);
simInt simCloseScene_internal();
simInt simSaveScene_internal(const simChar* filename);
simInt simLoadModel_internal(const simChar* filename);
simInt simSaveModel_internal(int baseOfModelHandle,const simChar* filename);
simInt simLoadUI_internal(const simChar* filename,int maxCount,int* uiHandles);
simInt simSaveUI_internal(int count,const int* uiHandles,const simChar* filename);
simInt simAddStatusbarMessage_internal(const simChar* message);
simChar* simGetSimulatorMessage_internal(simInt* messageID,simInt* auxiliaryData,simInt* returnedDataSize);
simInt simAddModuleMenuEntry_internal(const simChar* entryLabel,simInt itemCount,simInt* itemHandles);
simInt simSetModuleMenuItemState_internal(simInt itemHandle,simInt state,const simChar* label);
simInt simDoesFileExist_internal(const simChar* filename);
simInt simIsObjectInSelection_internal(simInt objectHandle);
simInt simAddObjectToSelection_internal(simInt what,simInt objectHandle);
simInt simRemoveObjectFromSelection_internal(simInt what,simInt objectHandle);
simInt simGetObjectSelectionSize_internal();
simInt simGetObjectLastSelection_internal();
simInt simGetObjectSelection_internal(simInt* objectHandles);
simInt simSearchPath_internal(simInt pathPlanningObjectHandle,simFloat maximumSearchTime);
simInt simInitializePathSearch_internal(simInt pathPlanningObjectHandle,simFloat maximumSearchTime,simFloat searchTimeStep);
simInt simPerformPathSearchStep_internal(simInt temporaryPathSearchObject,simBool abortSearch);
simInt simHandleCollision_internal(simInt collisionObjectHandle);
simInt simReadCollision_internal(simInt collisionObjectHandle);
simInt simHandleDistance_internal(simInt distanceObjectHandle,simFloat* smallestDistance);
simInt simReadDistance_internal(simInt distanceObjectHandle,simFloat* smallestDistance);
simInt simHandleProximitySensor_internal(simInt sensorHandle,simFloat* detectedPoint,simInt* detectedObjectHandle,simFloat* normalVector);
simInt simReadProximitySensor_internal(simInt sensorHandle,simFloat* detectedPoint,simInt* detectedObjectHandle,simFloat* normalVector);
simInt simHandleMill_internal(simInt millHandle,simFloat* removedSurfaceAndVolume);
simInt simHandleIkGroup_internal(simInt ikGroupHandle);
simInt simHandleDynamics_internal(simFloat deltaTime);
simInt simGetMechanismHandle_internal(const simChar* mechanismName);
simInt simGetPathPlanningHandle_internal(const simChar* pathPlanningObjectName);
simInt simGetMotionPlanningHandle_internal(const simChar* motionPlanningObjectName);
simInt simGetMpConfigForTipPose_internal(simInt motionPlanningObjectHandle,simInt options,simFloat closeNodesDistance,simInt trialCount,const simFloat* tipPose,simInt maxTimeInMs,simFloat* outputJointPositions,const simFloat* referenceConfigs,simInt referenceConfigCount,const simFloat* jointWeights,const simInt* jointBehaviour,simInt correctionPasses);
simFloat* simFindMpPath_internal(simInt motionPlanningObjectHandle,const simFloat* startConfig,const simFloat* goalConfig,simInt options,simFloat stepSize,simInt* outputConfigsCnt,simInt maxTimeInMs,simFloat* reserved,const simInt* auxIntParams,const simFloat* auxFloatParams);
simInt simHandleMechanism_internal(simInt mechanismHandle);
simInt simGetScriptHandle_internal(const simChar* scriptName);
simInt simSetScriptText_internal(simInt scriptHandle,const simChar* scriptText);
simChar* simGetScriptText_internal(simInt scriptHandle);
simInt simGetScriptProperty_internal(simInt scriptHandle,simInt* scriptProperty,simInt* associatedObjectHandle);
simInt simAssociateScriptWithObject_internal(simInt scriptHandle,simInt associatedObjectHandle);
simInt simGetScript_internal(simInt index);
simInt simGetScriptAssociatedWithObject_internal(simInt objectHandle);
simInt simGetObjectAssociatedWithScript_internal(simInt scriptHandle);
simChar* simGetScriptName_internal(simInt scriptHandle);
simInt simHandleMainScript_internal();
simInt simResetScript_internal(simInt scriptHandle);
simInt simAddScript_internal(simInt scriptProperty);
simInt simRemoveScript_internal(simInt scriptHandle);
simInt simRefreshDialogs_internal(simInt refreshDegree);
simInt simGetCollisionHandle_internal(const simChar* collisionObjectName);
simInt simGetDistanceHandle_internal(const simChar* distanceObjectName);
simInt simGetIkGroupHandle_internal(const simChar* ikGroupName);
simInt simResetCollision_internal(simInt collisionObjectHandle);
simInt simResetDistance_internal(simInt distanceObjectHandle);
simInt simResetProximitySensor_internal(simInt sensorHandle);
simInt simResetMill_internal(simInt millHandle);
simInt simCheckProximitySensor_internal(simInt sensorHandle,simInt entityHandle,simFloat* detectedPoint);
simInt simCheckProximitySensorEx_internal(simInt sensorHandle,simInt entityHandle,simInt detectionMode,simFloat detectionThreshold,simFloat maxAngle,simFloat* detectedPoint,simInt* detectedObjectHandle,simFloat* normalVector);
simInt simCheckProximitySensorEx2_internal(simInt sensorHandle,simFloat* vertexPointer,simInt itemType,simInt itemCount,simInt detectionMode,simFloat detectionThreshold,simFloat maxAngle,simFloat* detectedPoint,simFloat* normalVector);
simInt simAddSceneCustomData_internal(simInt header,const simChar* data,simInt dataLength);
simInt simGetSceneCustomDataLength_internal(simInt header);
simInt simGetSceneCustomData_internal(simInt header,simChar* data);
simInt simAddObjectCustomData_internal(simInt objectHandle,simInt header,const simChar* data,simInt dataLength);
simInt simGetObjectCustomDataLength_internal(simInt objectHandle,simInt header);
simInt simGetObjectCustomData_internal(simInt objectHandle,simInt header,simChar* data);
simChar* simCreateBuffer_internal(simInt size);
simInt simReleaseBuffer_internal(simChar* buffer);
simInt simCheckCollision_internal(simInt entity1Handle,simInt entity2Handle);
simInt simCheckCollisionEx_internal(simInt entity1Handle,simInt entity2Handle,simFloat** intersectionSegments);
simInt simCheckDistance_internal(simInt entity1Handle,simInt entity2Handle,simFloat threshold,simFloat* distanceData);
simChar* simGetObjectConfiguration_internal(simInt objectHandle);
simInt simSetObjectConfiguration_internal(const simChar* data);
simChar* simGetConfigurationTree_internal(simInt objectHandle);
simInt simSetConfigurationTree_internal(const simChar* data);
simInt simSetSimulationTimeStep_internal(simFloat timeStep);
simFloat simGetSimulationTimeStep_internal();
simInt simGetRealTimeSimulation_internal();
simInt simIsRealTimeSimulationStepNeeded_internal();
simInt simAdjustRealTimeTimer_internal(simInt instanceIndex,simFloat deltaTime);
simInt simGetSimulationPassesPerRenderingPass_internal();
simInt simAdvanceSimulationByOneStep_internal();
simInt simStartSimulation_internal();
simInt simStopSimulation_internal();
simInt simPauseSimulation_internal();
simInt simLoadModule_internal(const simChar* filenameAndPath,const simChar* pluginName);
simInt simUnloadModule_internal(simInt pluginhandle);
simVoid* simSendModuleMessage_internal(simInt message,simInt* auxiliaryData,simVoid* customData,simInt* replyData);
simVoid* simBroadcastMessage_internal(simInt* auxiliaryData,simVoid* customData,simInt* replyData);
simChar* simGetModuleName_internal(simInt index,simUChar* moduleVersion);
simChar* simGetScriptSimulationParameter_internal(simInt scriptHandle,const simChar* parameterName,simInt* parameterLength);
simInt simSetScriptSimulationParameter_internal(simInt scriptHandle,const simChar* parameterName,const simChar* parameterValue,simInt parameterLength);
simInt simFloatingViewAdd_internal(simFloat posX,simFloat posY,simFloat sizeX,simFloat sizeY,simInt options);
simInt simFloatingViewRemove_internal(simInt floatingViewHandle);
simInt simAdjustView_internal(simInt viewHandleOrIndex,simInt associatedViewableObjectHandle,simInt options,const simChar* viewLabel);
simInt simResetPath_internal(simInt pathHandle);
simInt simHandlePath_internal(simInt pathHandle,simFloat deltaTime);
simInt simResetJoint_internal(simInt jointHandle);
simInt simHandleJoint_internal(simInt jointHandle,simFloat deltaTime);
simInt simSetLastError_internal(const simChar* funcName,const simChar* errorMessage);
simInt simHandleGraph_internal(simInt graphHandle,simFloat simulationTime);
simInt simResetGraph_internal(simInt graphHandle);
simInt simSetNavigationMode_internal(simInt navigationMode);
simInt simGetNavigationMode_internal();
simInt simSetPage_internal(simInt index);
simInt simGetPage_internal();
simInt simDisplayDialog_internal(const simChar* titleText,const simChar* mainText,simInt dialogType,const simChar* initialText,const simFloat* titleColors,const simFloat* dialogColors,simInt* elementHandle);
simInt simGetDialogResult_internal(simInt genericDialogHandle);
simChar* simGetDialogInput_internal(simInt genericDialogHandle);
simInt simEndDialog_internal(simInt genericDialogHandle);
simInt simRegisterCustomLuaFunction_internal(const simChar* funcName,const simChar* callTips,const simInt* inputArgumentTypes,simVoid(*callBack)(struct SLuaCallBack* p));
simInt simRegisterCustomLuaVariable_internal(const simChar* varName,const simChar* varValue);
simInt simSetJointTargetVelocity_internal(simInt objectHandle,simFloat targetVelocity);
simInt simGetJointTargetVelocity_internal(simInt objectHandle,simFloat* targetVelocity);
simInt simSetPathTargetNominalVelocity_internal(simInt objectHandle,simFloat targetNominalVelocity);
simInt simLockInterface_internal(simBool locked);
simChar* simGetScriptRawBuffer_internal(simInt scriptHandle,simInt bufferHandle);
simInt simSetScriptRawBuffer_internal(simInt scriptHandle,const simChar* buffer,simInt bufferSize);
simInt simReleaseScriptRawBuffer_internal(simInt scriptHandle,simInt bufferHandle);
simInt simCopyPasteSelectedObjects_internal();
simInt simScaleSelectedObjects_internal(simFloat scalingFactor,simBool scalePositionsToo);
simInt simDeleteSelectedObjects_internal();
simInt simGetObjectUniqueIdentifier_internal(simInt objectHandle,simInt* uniqueIdentifier);
simInt simGetNameSuffix_internal(const simChar* name);
simInt simSendData_internal(simInt targetID,simInt dataHeader,const simChar* dataName,const simChar* data,simInt dataLength,simInt antennaHandle,simFloat actionRadius,simFloat emissionAngle1,simFloat emissionAngle2,simFloat persistence);
simChar* simReceiveData_internal(simInt dataHeader,const simChar* dataName,simInt antennaHandle,simInt index,simInt* dataLength,simInt* senderID,simInt* dataHeaderR,simChar** dataNameR);
simInt simSetGraphUserData_internal(simInt graphHandle,const simChar* dataStreamName,simFloat data);
simInt simSetNameSuffix_internal(simInt nameSuffixNumber);
simInt simAddDrawingObject_internal(simInt objectType,simFloat size,simFloat duplicateTolerance,simInt parentObjectHandle,simInt maxItemCount,const simFloat* ambient,const simFloat* diffuse,const simFloat* specular,const simFloat* emission);
simInt simRemoveDrawingObject_internal(simInt objectHandle);
simInt simAddDrawingObjectItem_internal(simInt objectHandle,const simFloat* itemData);
simInt simAddParticleObject_internal(simInt objectType,simFloat size,simFloat density,const simVoid* params,simFloat lifeTime,simInt maxItemCount,const simFloat* ambient,const simFloat* diffuse,const simFloat* specular,const simFloat* emission);
simInt simRemoveParticleObject_internal(simInt objectHandle);
simInt simAddParticleObjectItem_internal(simInt objectHandle,const simFloat* itemData);
simFloat simGetObjectSizeFactor_internal(simInt objectHandle);
simInt simAnnounceSceneContentChange_internal();
simInt simResetMilling_internal(simInt objectHandle);
simInt simApplyMilling_internal(simInt objectHandle);
simInt simSetIntegerSignal_internal(const simChar* signalName,simInt signalValue);
simInt simGetIntegerSignal_internal(const simChar* signalName,simInt* signalValue);
simInt simClearIntegerSignal_internal(const simChar* signalName);
simInt simSetFloatSignal_internal(const simChar* signalName,simFloat signalValue);
simInt simGetFloatSignal_internal(const simChar* signalName,simFloat* signalValue);
simInt simClearFloatSignal_internal(const simChar* signalName);
simInt simSetStringSignal_internal(const simChar* signalName,const simChar* signalValue,simInt stringLength);
simChar* simGetStringSignal_internal(const simChar* signalName,simInt* stringLength);
simInt simClearStringSignal_internal(const simChar* signalName);
simChar* simGetSignalName_internal(simInt signalIndex,simInt signalType);
simInt simSetObjectProperty_internal(simInt objectHandle,simInt prop);
simInt simGetObjectProperty_internal(simInt objectHandle);
simInt simSetObjectSpecialProperty_internal(simInt objectHandle,simInt prop);
simInt simGetObjectSpecialProperty_internal(simInt objectHandle);
simInt simGetPositionOnPath_internal(simInt pathHandle,simFloat relativeDistance,simFloat* position);
simInt simGetOrientationOnPath_internal(simInt pathHandle,simFloat relativeDistance,simFloat* eulerAngles);
simInt simGetClosestPositionOnPath_internal(simInt pathHandle,simFloat* absolutePosition,simFloat* pathPosition);
simInt simReadForceSensor_internal(simInt objectHandle,simFloat* forceVector,simFloat* torqueVector);
simInt simBreakForceSensor_internal(simInt objectHandle);
simInt simGetShapeVertex_internal(simInt shapeHandle,simInt groupElementIndex,simInt vertexIndex,simFloat* relativePosition);
simInt simGetShapeTriangle_internal(simInt shapeHandle,simInt groupElementIndex,simInt triangleIndex,simInt* vertexIndices,simFloat* triangleNormals);
simInt simSetLightParameters_internal(simInt objectHandle,simInt state,const simFloat* ambientPart,const simFloat* diffusePart,const simFloat* specularPart);
simInt simGetLightParameters_internal(simInt objectHandle,simFloat* ambientPart,simFloat* diffusePart,simFloat* specularPart);
simInt simHandleVarious_internal();
simInt simGetVelocity_internal(simInt shapeHandle,simFloat* linearVelocity,simFloat* angularVelocity);
simInt simGetObjectVelocity_internal(simInt objectHandle,simFloat* linearVelocity,simFloat* angularVelocity);
simInt simAddForceAndTorque_internal(simInt shapeHandle,const simFloat* force,const simFloat* torque);
simInt simAddForce_internal(simInt shapeHandle,const simFloat* position,const simFloat* force);
simInt simSetExplicitHandling_internal(simInt generalObjectHandle,int explicitFlags);
simInt simGetExplicitHandling_internal(simInt generalObjectHandle);
simInt simGetLinkDummy_internal(simInt dummyHandle);
simInt simSetLinkDummy_internal(simInt dummyHandle,simInt linkedDummyHandle);
simInt simSetModelProperty_internal(simInt objectHandle,simInt modelProperty);
simInt simGetModelProperty_internal(simInt objectHandle);
simInt simSetShapeColor_internal(simInt shapeHandle,const simChar* colorName,simInt colorComponent,const simFloat* rgbData);
simInt simGetShapeColor_internal(simInt shapeHandle,const simChar* colorName,simInt colorComponent,simFloat* rgbData);
simInt simResetDynamicObject_internal(simInt objectHandle);
simInt simSetJointMode_internal(simInt jointHandle,simInt jointMode,simInt options);
simInt simGetJointMode_internal(simInt jointHandle,simInt* options);
simInt simSerialOpen_internal(const simChar* portString,simInt baudRate,simVoid* reserved1,simVoid* reserved2);
simInt simSerialClose_internal(simInt portHandle);
simInt simSerialSend_internal(simInt portHandle,const simChar* data,simInt dataLength);
simInt simSerialRead_internal(simInt portHandle,simChar* buffer,simInt dataLengthToRead);
simInt simSerialCheck_internal(simInt portHandle);
simInt simGetContactInfo_internal(simInt dynamicPass,simInt objectHandle,simInt index,simInt* objectHandles,simFloat* contactInfo);
simInt simSetThreadIsFree_internal(simBool freeMode);
simInt simTubeOpen_internal(simInt dataHeader,const simChar* dataName,simInt readBufferSize,simBool notUsedButKeepZero);
simInt simTubeClose_internal(simInt tubeHandle);
simInt simTubeWrite_internal(simInt tubeHandle,const simChar* data,simInt dataLength);
simChar* simTubeRead_internal(simInt tubeHandle,simInt* dataLength);
simInt simTubeStatus_internal(simInt tubeHandle,simInt* readPacketsCount,simInt* writePacketsCount);
simInt simAuxiliaryConsoleOpen_internal(const simChar* title,simInt maxLines,simInt mode,const simInt* position,const simInt* size,const simFloat* textColor,const simFloat* backgroundColor);
simInt simAuxiliaryConsoleClose_internal(simInt consoleHandle);
simInt simAuxiliaryConsoleShow_internal(simInt consoleHandle,simBool showState);
simInt simAuxiliaryConsolePrint_internal(simInt consoleHandle,const simChar* text);
simInt simImportShape_internal(simInt fileformat,const simChar* pathAndFilename,simInt options,simFloat identicalVerticeTolerance,simFloat scalingFactor);
simInt simImportMesh_internal(simInt fileformat,const simChar* pathAndFilename,simInt options,simFloat identicalVerticeTolerance,simFloat scalingFactor,simFloat*** vertices,simInt** verticesSizes,simInt*** indices,simInt** indicesSizes,simFloat*** reserved,simChar*** names);
simInt simExportMesh_internal(simInt fileformat,const simChar* pathAndFilename,simInt options,simFloat scalingFactor,simInt elementCount,simFloat** vertices,const simInt* verticesSizes,simInt** indices,const simInt* indicesSizes,simFloat** reserved,simChar** names);
simInt simCreateMeshShape_internal(simInt options,simFloat shadingAngle,const simFloat* vertices,simInt verticesSize,const simInt* indices,simInt indicesSize,simFloat* reserved);
simInt simCreatePureShape_internal(simInt primitiveType,simInt options,const simFloat* sizes,simFloat mass,const simInt* precision);
simInt simCreateHeightfieldShape_internal(simInt options,simFloat shadingAngle,simInt xPointCount,simInt yPointCount,simFloat xSize,const simFloat* heights);
simInt simGetShapeMesh_internal(simInt shapeHandle,simFloat** vertices,simInt* verticesSize,simInt** indices,simInt* indicesSize,simFloat** normals);
simInt simAddBanner_internal(const simChar* label,simFloat size,simInt options,const simFloat* positionAndEulerAngles,simInt parentObjectHandle,const simFloat* labelColors,const simFloat* backgroundColors);
simInt simRemoveBanner_internal(simInt bannerID);
simInt simCreateJoint_internal(simInt jointType,simInt jointMode,simInt options,const simFloat* sizes,const simFloat* colorA,const simFloat* colorB);
simInt simRegisterContactCallback_internal(simInt(*callBack)(simInt,simInt,simInt,simInt*,simFloat*));
simInt simGetObjectIntParameter_internal(simInt objectHandle,simInt parameterID,simInt* parameter);
simInt simSetObjectIntParameter_internal(simInt objectHandle,simInt parameterID,simInt parameter);
simInt simGetObjectFloatParameter_internal(simInt objectHandle,simInt parameterID,simFloat* parameter);
simInt simSetObjectFloatParameter_internal(simInt objectHandle,simInt parameterID,simFloat parameter);
simChar* simGetObjectStringParameter_internal(simInt objectHandle,simInt parameterID,simInt* parameterLength);
simInt simSetObjectStringParameter_internal(simInt objectHandle,simInt parameterID,simChar* parameter,simInt parameterLength);
simInt simSetSimulationPassesPerRenderingPass_internal(simInt p);
simInt simGetRotationAxis_internal(const simFloat* matrixStart,const simFloat* matrixGoal,simFloat* axis,simFloat* angle);
simInt simRotateAroundAxis_internal(const simFloat* matrixIn,const simFloat* axis,const simFloat* axisPos,simFloat angle,simFloat* matrixOut);
simInt simJointGetForce_internal(simInt jointHandle,simFloat* forceOrTorque);
simInt simSetArrayParameter_internal(simInt parameter,const simVoid* arrayOfValues);
simInt simGetArrayParameter_internal(simInt parameter,simVoid* arrayOfValues);
simInt simSetIkGroupProperties_internal(simInt ikGroupHandle,simInt resolutionMethod,simInt maxIterations,simFloat damping,void* reserved);
simInt simSetIkElementProperties_internal(simInt ikGroupHandle,simInt tipDummyHandle,simInt constraints,const simFloat* precision,const simFloat* weight,void* reserved);
simInt simCameraFitToView_internal(simInt viewHandleOrIndex,simInt objectCount,const simInt* objectHandles,simInt options,simFloat scaling);
simInt simPersistentDataWrite_internal(const simChar* dataName,const simChar* dataValue,simInt dataLength,simInt options);
simChar* simPersistentDataRead_internal(const simChar* dataName,simInt* dataLength);
simInt simIsHandleValid_internal(simInt generalObjectHandle,simInt generalObjectType);
simInt simHandleVisionSensor_internal(simInt visionSensorHandle,simFloat** auxValues,simInt** auxValuesCount);
simInt simReadVisionSensor_internal(simInt visionSensorHandle,simFloat** auxValues,simInt** auxValuesCount);
simInt simResetVisionSensor_internal(simInt visionSensorHandle);
simInt simCheckVisionSensor_internal(simInt visionSensorHandle,simInt entityHandle,simFloat** auxValues,simInt** auxValuesCount);
simFloat* simCheckVisionSensorEx_internal(simInt visionSensorHandle,simInt entityHandle,simBool returnImage);
simInt simGetVisionSensorResolution_internal(simInt visionSensorHandle,simInt* resolution);
simFloat* simGetVisionSensorImage_internal(simInt visionSensorHandle);
simInt simSetVisionSensorImage_internal(simInt visionSensorHandle,const simFloat* image);
simFloat* simGetVisionSensorDepthBuffer_internal(simInt visionSensorHandle);
simInt simCreateUI_internal(const simChar* uiName,simInt menuAttributes,const simInt* clientSize,const simInt* cellSize,simInt* buttonHandles);
simInt simCreateUIButton_internal(simInt uiHandle,const simInt* position,const simInt* size,simInt buttonProperty);
simInt simGetUIHandle_internal(const simChar* uiName);
simInt simGetUIProperty_internal(simInt uiHandle);
simInt simGetUIEventButton_internal(simInt uiHandle,simInt* auxiliaryValues);
simInt simSetUIProperty_internal(simInt uiHandle,simInt elementProperty);
simInt simGetUIButtonProperty_internal(simInt uiHandle,simInt buttonHandle);
simInt simSetUIButtonProperty_internal(simInt uiHandle,simInt buttonHandle,simInt buttonProperty);
simInt simGetUIButtonSize_internal(simInt uiHandle,simInt buttonHandle,simInt* size);
simInt simSetUIButtonLabel_internal(simInt uiHandle,simInt buttonHandle,const simChar* upStateLabel,const simChar* downStateLabel);
simChar* simGetUIButtonLabel_internal(simInt uiHandle,simInt buttonHandle);
simInt simSetUISlider_internal(simInt uiHandle,simInt buttonHandle,simInt position);
simInt simGetUISlider_internal(simInt uiHandle,simInt buttonHandle);
simInt simSetUIButtonColor_internal(simInt uiHandle,simInt buttonHandle,const simFloat* upStateColor,const simFloat* downStateColor,const simFloat* labelColor);
simInt simSetUIButtonTexture_internal(simInt uiHandle,simInt buttonHandle,const simInt* size,const simChar* textureData);
simInt simCreateUIButtonArray_internal(simInt uiHandle,simInt buttonHandle);
simInt simSetUIButtonArrayColor_internal(simInt uiHandle,simInt buttonHandle,const simInt* position,const simFloat* color);
simInt simDeleteUIButtonArray_internal(simInt uiHandle,simInt buttonHandle);
simInt simRemoveUI_internal(simInt uiHandle);
simInt simSetUIPosition_internal(simInt uiHandle,const simInt* position);
simInt simGetUIPosition_internal(simInt uiHandle,simInt* position);
simInt simRMLPosition_internal(simInt dofs,simDouble timeStep,simInt flags,const simDouble* currentPosVelAccel,const simDouble* maxVelAccelJerk,const simBool* selection,const simDouble* targetPosVel,simDouble* newPosVelAccel,simVoid* auxData);
simInt simRMLVelocity_internal(simInt dofs,simDouble timeStep,simInt flags,const simDouble* currentPosVelAccel,const simDouble* maxAccelJerk,const simBool* selection,const simDouble* targetVel,simDouble* newPosVelAccel,simVoid* auxData);
simChar* simFileDialog_internal(simInt mode,const simChar* title,const simChar* startPath,const simChar* initName,const simChar* extName,const simChar* ext);
simInt simMsgBox_internal(simInt dlgType,simInt buttons,const simChar* title,const simChar* message);
simInt simCreateDummy_internal(simFloat size,const simFloat* color);
simInt simSetShapeMassAndInertia_internal(simInt shapeHandle,simFloat mass,const simFloat* inertiaMatrix,const simFloat* centerOfMass,const simFloat* transformation);
simInt simGetShapeMassAndInertia_internal(simInt shapeHandle,simFloat* mass,simFloat* inertiaMatrix,simFloat* centerOfMass,const simFloat* transformation);
simInt simGroupShapes_internal(const simInt* shapeHandles,simInt shapeCount);
simInt* simUngroupShape_internal(simInt shapeHandle,simInt* shapeCount);
simInt simCreateProximitySensor_internal(simInt sensorType,simInt subType,simInt options,const simInt* intParams,const simFloat* floatParams,const simFloat* color);
simInt simCreateForceSensor_internal(simInt options,const simInt* intParams,const simFloat* floatParams,const simFloat* color);
simInt simCreateVisionSensor_internal(simInt options,const simInt* intParams,const simFloat* floatParams,const simFloat* color);
simInt simConvexDecompose_internal(simInt shapeHandle,simInt options,const simInt* intParams,const simFloat* floatParams);
simInt simCreatePath_internal(simInt attributes,const simInt* intParams,const simFloat* floatParams,const simFloat* color);
simInt simInsertPathCtrlPoints_internal(simInt pathHandle,simInt options,simInt startIndex,simInt ptCnt,const simVoid* ptData);
simInt simCutPathCtrlPoints_internal(simInt pathHandle,simInt startIndex,simInt ptCnt);
simFloat* simGetIkGroupMatrix_internal(simInt ikGroupHandle,simInt options,simInt* matrixSize);
simInt simRegisterJointCtrlCallback_internal(simInt(*callBack)(simInt,simInt,simInt,const simInt*,const simFloat*,simFloat*));
simInt simAddGhost_internal(simInt ghostGroup,simInt objectHandle,simInt options,simFloat startTime,simFloat endTime,const simFloat* color);
simInt simModifyGhost_internal(simInt ghostGroup,simInt ghostId,simInt operation,simFloat floatValue,simInt options,simInt optionsMask,const simFloat* colorOrTransformation);
simVoid simQuitSimulator_internal(simBool doNotDisplayMessages);
simInt simGetThreadId_internal();
simInt simLockResources_internal(simInt lockType,simInt reserved);
simInt simUnlockResources_internal(simInt lockHandle);
simInt simEnableEventCallback_internal(simInt eventCallbackType,const simChar* plugin,simInt reserved);



simInt _simGetContactCallbackCount_internal();
const void* _simGetContactCallback_internal(simInt index);
simVoid _simSetDynamicSimulationIconCode_internal(simVoid* object,simInt code);
simVoid _simSetDynamicObjectFlagForVisualization_internal(simVoid* object,simInt flag);
simInt _simGetObjectListSize_internal(simInt objType);
const simVoid* _simGetObjectFromIndex_internal(simInt objType,simInt index);
simInt _simGetObjectID_internal(const simVoid* object);
simInt _simGetObjectType_internal(const simVoid* object);
const simVoid** _simGetObjectChildren_internal(const simVoid* object,simInt* count);
const simVoid* _simGetGeomProxyFromShape_internal(const simVoid* shape);
const simVoid* _simGetParentObject_internal(const simVoid* object);
const simVoid* _simGetObject_internal(int objID);
simVoid _simGetObjectLocalTransformation_internal(const simVoid* object,simFloat* pos,simFloat* quat,simBool excludeFirstJointTransformation);
simVoid _simSetObjectLocalTransformation_internal(simVoid* object,const simFloat* pos,const simFloat* quat);
simVoid _simSetObjectCumulativeTransformation_internal(simVoid* object,const simFloat* pos,const simFloat* quat,simBool keepChildrenInPlace);
simVoid _simGetObjectCumulativeTransformation_internal(const simVoid* object,simFloat* pos,simFloat* quat,simBool excludeFirstJointTransformation);
simBool _simIsShapeDynamicallyStatic_internal(const simVoid* shape);
simInt _simGetTreeDynamicProperty_internal(const simVoid* object);
simInt _simGetDummyLinkType_internal(const simVoid* dummy,simInt* linkedDummyID);
simInt _simGetJointMode_internal(const simVoid* joint);
simBool _simIsJointInHybridOperation_internal(const simVoid* joint);
simVoid _simDisableDynamicTreeForManipulation_internal(const simVoid* object,simBool disableFlag);
simBool _simIsShapeDynamicallyRespondable_internal(const simVoid* shape);
simInt _simGetDynamicCollisionMask_internal(const simVoid* shape);
const simVoid* _simGetLastParentForLocalGlobalCollidable_internal(const simVoid* shape);
simVoid _simSetShapeIsStaticAndNotRespondableButDynamicTag_internal(const simVoid* shape,simBool tag);
simBool _simGetShapeIsStaticAndNotRespondableButDynamicTag_internal(const simVoid* shape);
simVoid _simSetJointPosition_internal(const simVoid* joint,simFloat pos);
simFloat _simGetJointPosition_internal(const simVoid* joint);
simVoid _simSetDynamicMotorPositionControlTargetPosition_internal(const simVoid* joint,simFloat pos);
simVoid _simGetInitialDynamicVelocity_internal(const simVoid* shape,simFloat* vel);
simVoid _simSetInitialDynamicVelocity_internal(simVoid* shape,const simFloat* vel);
simVoid _simGetInitialDynamicAngVelocity_internal(const simVoid* shape,simFloat* angularVel);
simVoid _simSetInitialDynamicAngVelocity_internal(simVoid* shape,const simFloat* angularVel);
simBool _simGetStartSleeping_internal(const simVoid* shape);
simBool _simGetWasPutToSleepOnce_internal(const simVoid* shape);
simBool _simGetDynamicsFullRefreshFlag_internal(const simVoid* object);
simVoid _simSetDynamicsFullRefreshFlag_internal(const simVoid* object,simBool flag);
simVoid _simSetGeomProxyDynamicsFullRefreshFlag_internal(simVoid* geomData,simBool flag);
simBool _simGetGeomProxyDynamicsFullRefreshFlag_internal(const simVoid* geomData);
simBool _simGetParentFollowsDynamic_internal(const simVoid* shape);
simVoid _simSetShapeDynamicVelocity_internal(simVoid* shape,const simFloat* linear,const simFloat* angular);
simVoid _simGetAdditionalForceAndTorque_internal(const simVoid* shape,simFloat* force,simFloat* torque);
simVoid _simClearAdditionalForceAndTorque_internal(const simVoid* shape);
simBool _simGetJointPositionInterval_internal(const simVoid* joint,simFloat* minValue,simFloat* rangeValue);
simInt _simGetJointType_internal(const simVoid* joint);
simVoid _simGetJointOdeParameters_internal(const simVoid* joint,simFloat* stopERP,simFloat* stopCFM,simFloat* bounce,simFloat* fudge,simFloat* normalCFM);
simVoid _simGetJointBulletParameters_internal(const simVoid* joint,simFloat* stopERP,simFloat* stopCFM,simFloat* normalCFM);
simBool _simIsForceSensorBroken_internal(const simVoid* forceSensor);
simVoid _simGetDynamicForceSensorLocalTransformationPart2_internal(const simVoid* forceSensor,simFloat* pos,simFloat* quat);
simBool _simIsDynamicMotorEnabled_internal(const simVoid* joint);
simBool _simIsDynamicMotorPositionCtrlEnabled_internal(const simVoid* joint);
simBool _simIsDynamicMotorTorqueModulationEnabled_internal(const simVoid* joint);
simVoid _simGetMotorPid_internal(const simVoid* joint,simFloat* pParam,simFloat* iParam,simFloat* dParam);
simFloat _simGetDynamicMotorTargetPosition_internal(const simVoid* joint);
simFloat _simGetDynamicMotorTargetVelocity_internal(const simVoid* joint);
simFloat _simGetDynamicMotorMaxForce_internal(const simVoid* joint);
simFloat _simGetDynamicMotorUpperLimitVelocity_internal(const simVoid* joint);
simVoid _simSetDynamicMotorReflectedPositionFromDynamicEngine_internal(simVoid* joint,simFloat pos);
simVoid _simSetJointSphericalTransformation_internal(simVoid* joint,const simFloat* quat);
simVoid _simAddForceSensorCumulativeForcesAndTorques_internal(simVoid* forceSensor,const simFloat* force,const simFloat* torque,int totalPassesCount);
simVoid _simAddJointCumulativeForcesOrTorques_internal(simVoid* joint,float forceOrTorque,int totalPassesCount);
simVoid _simSetDynamicJointLocalTransformationPart2_internal(simVoid* joint,const simFloat* pos,const simFloat* quat);
simVoid _simSetDynamicForceSensorLocalTransformationPart2_internal(simVoid* forceSensor,const simFloat* pos,const simFloat* quat);
simVoid _simSetDynamicJointLocalTransformationPart2IsValid_internal(simVoid* joint,simBool valid);
simVoid _simSetDynamicForceSensorLocalTransformationPart2IsValid_internal(simVoid* forceSensor,simBool valid);
const simVoid* _simGetGeomWrapFromGeomProxy_internal(const simVoid* geomData);
simVoid _simGetLocalInertiaFrame_internal(const simVoid* geomInfo,simFloat* pos,simFloat* quat);
simInt _simGetPurePrimitiveType_internal(const simVoid* geomInfo);
simBool _simIsGeomWrapGeometric_internal(const simVoid* geomInfo);
simBool _simIsGeomWrapConvex_internal(const simVoid* geomInfo);
simInt _simGetGeometricCount_internal(const simVoid* geomInfo);
simVoid _simGetAllGeometrics_internal(const simVoid* geomInfo,simVoid** allGeometrics);
simVoid _simGetPurePrimitiveSizes_internal(const simVoid* geometric,simFloat* sizes);
simVoid _simMakeDynamicAnnouncement_internal(int announceType);
simVoid _simGetVerticesLocalFrame_internal(const simVoid* geometric,simFloat* pos,simFloat* quat);
const simFloat* _simGetHeightfieldData_internal(const simVoid* geometric,simInt* xCount,simInt* yCount,simFloat* minHeight,simFloat* maxHeight);
simVoid _simGetCumulativeMeshes_internal(const simVoid* geomInfo,simFloat** vertices,simInt* verticesSize,simInt** indices,simInt* indicesSize);
simVoid _simGetOdeMaxContactFrictionCFMandERP_internal(const simVoid* geomInfo,simInt* maxContacts,simFloat* friction,simFloat* cfm,simFloat* erp);
simBool _simGetBulletCollisionMargin_internal(const simVoid* geomInfo,simFloat* margin,simInt* otherProp);
simBool _simGetBulletStickyContact_internal(const simVoid* geomInfo);
simFloat _simGetBulletRestitution_internal(const simVoid* geomInfo);
simFloat _simGetMass_internal(const simVoid* geomInfo);
simVoid _simGetPrincipalMomentOfInertia_internal(const simVoid* geomInfo,simFloat* inertia);
simVoid _simGetDamping_internal(const simVoid* geomInfo,simFloat* linDamping,simFloat* angDamping);
simFloat _simGetFriction_internal(const simVoid* geomInfo);
simVoid _simGetGravity_internal(simFloat* gravity);
simInt _simGetTimeDiffInMs_internal(simInt previousTime);
simBool _simDoEntitiesCollide_internal(simInt entity1ID,simInt entity2ID,simInt* cacheBuffer,simBool overrideCollidableFlagIfShape1,simBool overrideCollidableFlagIfShape2,simBool pathOrMotionPlanningRoutineCalling);
simBool _simGetDistanceBetweenEntitiesIfSmaller_internal(simInt entity1ID,simInt entity2ID,simFloat* distance,simFloat* ray,simInt* cacheBuffer,simBool overrideMeasurableFlagIfNonCollection1,simBool overrideMeasurableFlagIfNonCollection2,simBool pathPlanningRoutineCalling);
simInt _simHandleJointControl_internal(const simVoid* joint,simInt auxV,const simInt* inputValuesInt,const simFloat* inputValuesFloat,simFloat* outputValues);
simInt _simHandleCustomContact_internal(simInt objHandle1,simInt objHandle2,simInt engine,simInt* dataInt,simFloat* dataFloat);
const simVoid* _simGetIkGroupObject_internal(int ikGroupID);
simInt _simMpHandleIkGroupObject_internal(const simVoid* ikGroup);
simFloat _simGetPureHollowScaling_internal(const simVoid* geometric);
simVoid _simGetVortexParameters_internal(const simVoid* object,simInt version,simFloat* floatParams,simInt* intParams);

// Deprecated
simInt simSerialPortOpen_internal(simInt portNumber,simInt baudRate,simVoid* reserved1,simVoid* reserved2);
simInt simSerialPortClose_internal(simInt portNumber);
simInt simSerialPortSend_internal(simInt portNumber,const simChar* data,simInt dataLength);
simInt simSerialPortRead_internal(simInt portNumber,simChar* buffer,simInt dataLengthToRead);


//extensions
simInt simAttachDirtyTexture_internal(simInt objHandle, simChar * filename);

#endif // !defined(V_REP_internal_INCLUDED_)
